name: CI/CD - Build, Push, Deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}/fusionpact

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      backend_image: ${{ steps.set_outputs.outputs.backend_image }}
      frontend_image: ${{ steps.set_outputs.outputs.frontend_image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push backend image
        id: backend_build
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-backend:latest
            ${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}

      - name: Build & push frontend image
        id: frontend_build
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-frontend:latest
            ${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}

      - name: Set job outputs (backend_image & frontend_image)
        id: set_outputs
        run: |
          echo "backend_image=${IMAGE_PREFIX}-backend:${GITHUB_SHA}" >> $GITHUB_OUTPUT
          echo "frontend_image=${IMAGE_PREFIX}-frontend:${GITHUB_SHA}" >> $GITHUB_OUTPUT
        env:
          IMAGE_PREFIX: ${{ env.IMAGE_PREFIX }}
          GITHUB_SHA: ${{ github.sha }}

  deploy:
  name: Deploy to EC2
  needs: build-and-push
  runs-on: ubuntu-latest
  env:
    REMOTE_APP_DIR: ${{ secrets.REMOTE_APP_DIR }}
    BACKEND_IMAGE: ${{ needs.build-and-push.outputs.backend_image }}
    FRONTEND_IMAGE: ${{ needs.build-and-push.outputs.frontend_image }}
  steps:
    - name: Checkout (for docker-compose.yml)
      uses: actions/checkout@v4

    - name: Ensure ssh client & envsubst available
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client gettext-base

    - name: Start ssh-agent and add key
      uses: webfactory/ssh-agent@v0.9.1
      with:
        ssh-private-key: ${{ secrets.DEPLOY_KEY }}

    - name: Quick SSH connectivity check (fail fast)
      run: ssh -o BatchMode=yes -o ConnectTimeout=7 -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'echo OK'

    - name: Create compose with pinned images
      id: render_compose
      run: |
        envsubst '${BACKEND_IMAGE} ${FRONTEND_IMAGE}' < docker-compose.yml > docker-compose.scp.yml
        head -n 40 docker-compose.scp.yml

    - name: Ensure remote directory exists
      run: ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ${REMOTE_APP_DIR}"

    - name: Copy rendered docker-compose.yml to remote
      run: scp -o StrictHostKeyChecking=no docker-compose.scp.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${REMOTE_APP_DIR}/docker-compose.yml

    - name: Trigger remote docker-compose pull & up
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} <<'EOF'
          set -e
          cd ${REMOTE_APP_DIR}

          if command -v docker-compose >/dev/null 2>&1; then
            COMPOSE_CMD="docker-compose"
          else
            COMPOSE_CMD="docker compose"
          fi

          echo "Using compose command: $COMPOSE_CMD"
          $COMPOSE_CMD pull || true
          $COMPOSE_CMD up -d --remove-orphans

          sleep 3
          echo "Deployed. Containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
        EOF
