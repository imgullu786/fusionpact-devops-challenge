name: CI/CD - Build, Push, Deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}/fusionpact

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      backend_image: ${{ steps.backend_tag.outputs.backend_image }}
      frontend_image: ${{ steps.frontend_tag.outputs.frontend_image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push backend image
        id: backend_build
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-backend:latest
            ${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}

      - name: Expose backend image tag
        id: backend_tag
        run: |
          echo "backend_image=${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}" >> $GITHUB_OUTPUT
        env:
          IMAGE_PREFIX: ${{ env.IMAGE_PREFIX }}
          GITHUB_SHA: ${{ github.sha }}

      - name: Build & push frontend image
        id: frontend_build
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-frontend:latest
            ${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}

      - name: Expose frontend image tag
        id: frontend_tag
        run: |
          echo "frontend_image=${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT
        env:
          IMAGE_PREFIX: ${{ env.IMAGE_PREFIX }}
          GITHUB_SHA: ${{ github.sha }}

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      REMOTE_APP_DIR: ${{ secrets.REMOTE_APP_DIR }}
      BACKEND_IMAGE: ${{ needs.build-and-push.outputs.backend_image }}
      FRONTEND_IMAGE: ${{ needs.build-and-push.outputs.frontend_image }}
    steps:
      - name: Checkout (for docker-compose template)
        uses: actions/checkout@v4

      - name: Debug workspace before render
        run: |
          echo "PWD: $(pwd)"
          ls -la
          ls -la backend || true
          test -f docker-compose.yml && echo "FOUND: docker-compose.yml" || echo "MISSING: docker-compose.yml"
          test -f docker-compose.yml.template && echo "FOUND: docker-compose.yml.template" || echo "MISSING: docker-compose.yml.template"

      - name: Install SSH client & envsubst
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client gettext-base

      - name: Render compose (template) or use repo file
        run: |
          # prefer a template if present, else use repo docker-compose.yml
          if [ -f docker-compose.yml.template ]; then
            TEMPLATE=docker-compose.yml.template
          elif [ -f backend/docker-compose.yml.template ]; then
            TEMPLATE=backend/docker-compose.yml.template
          elif [ -f docker-compose.yml ]; then
            cp docker-compose.yml docker-compose.scp.yml
            exit 0
          elif [ -f backend/docker-compose.yml ]; then
            cp backend/docker-compose.yml docker-compose.scp.yml
            exit 0
          else
            echo "No compose file or template found in repo" >&2
            exit 1
          fi
          echo "Using template: $TEMPLATE"
          envsubst '${BACKEND_IMAGE} ${FRONTEND_IMAGE}' < "$TEMPLATE" > docker-compose.scp.yml
          echo "Rendered compose (top 40 lines):"
          head -n 40 docker-compose.scp.yml

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Determine remote path (fallback and debug)
  id: remote_path
  run: |
    REMOTE_APP_DIR="${{ secrets.REMOTE_APP_DIR }}"
    : "${REMOTE_APP_DIR:=/home/ubuntu/fusionpact-devops-challenge}"
    echo "remote=${REMOTE_APP_DIR}" >> "$GITHUB_OUTPUT"

- name: Ensure remote directory exists
  run: ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ${{ steps.remote_path.outputs.remote }}"

- name: Copy rendered docker-compose.yml to remote
  run: scp -o StrictHostKeyChecking=no docker-compose.scp.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ steps.remote_path.outputs.remote }}/docker-compose.yml

- name: Remote docker-compose pull & up (explicit file)
  run: |
    REMOTE="${{ steps.remote_path.outputs.remote }}"
    ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} <<EOF
      set -e
      FILE=${REMOTE}/docker-compose.yml
      echo "Using compose file: \$FILE"
      if command -v docker-compose >/dev/null 2>&1; then
        docker-compose -f "\$FILE" pull || true
        docker-compose -f "\$FILE" up -d --remove-orphans
      else
        docker compose -f "\$FILE" pull || true
        docker compose -f "\$FILE" up -d --remove-orphans
      fi
      docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
EOF
Key point: REMOTE is set locally (on the runner) and the heredoc receives the fully-resolved path as literal FILE=/home/ubuntu/…/docker-compose.yml. That prevents the remote shell from seeing an empty REMOTE_APP_DIR.

Option B — pass the path via environment variable in the ssh command
This sets an environment variable in the remote command invocation so it exists inside the remote session:

yaml
Copy code
- name: Remote docker-compose pull & up (via remote env)
  run: |
    REMOTE="${{ steps.remote_path.outputs.remote }}"
    ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} REMOTE_APP_DIR="${REMOTE}" bash -s <<'REMOTE_SCRIPT'
      set -e
      FILE="${REMOTE_APP_DIR}/docker-compose.yml"
      echo "Using compose file: $FILE"
      if command -v docker-compose >/dev/null 2>&1; then
        docker-compose -f "$FILE" pull || true
        docker-compose -f "$FILE" up -d --remove-orphans
      else
        docker compose -f "$FILE" pull || true
        docker compose -f "$FILE" up -d --remove-orphans
      fi
      docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
REMOTE_SCRIPT
