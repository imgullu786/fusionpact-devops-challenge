name: CI/CD - Build, Push, Deploy

on:
  push:
    branches:
      - main

env:
  IMAGE_PREFIX: ${{ secrets.DOCKERHUB_USERNAME }}/fusionpact

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      backend_image: ${{ steps.backend_tag.outputs.backend_image }}
      frontend_image: ${{ steps.frontend_tag.outputs.frontend_image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-backend:latest
            ${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}

      - name: Expose backend image tag
        id: backend_tag
        run: echo "backend_image=${{ env.IMAGE_PREFIX }}-backend:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Build & push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}-frontend:latest
            ${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}

      - name: Expose frontend image tag
        id: frontend_tag
        run: echo "frontend_image=${{ env.IMAGE_PREFIX }}-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Render docker-compose from template
        run: |
          # This assumes docker-compose.yml.template exists at the root
          # The complex if/else is removed for simplicity.
          envsubst '${BACKEND_IMAGE} ${FRONTEND_IMAGE}' < docker-compose.yml.template > docker-compose.rendered.yml
        env:
          BACKEND_IMAGE: ${{ needs.build-and-push.outputs.backend_image }}
          FRONTEND_IMAGE: ${{ needs.build-and-push.outputs.frontend_image }}

      - name: Package artifacts for deployment
        run: tar -czf deploy_package.tar.gz monitoring docker-compose.rendered.yml

      - name: Start ssh-agent and add key
        uses: webfactory/ssh-agent@v0.9.1
        with:
          ssh-private-key: ${{ secrets.DEPLOY_KEY }}

      - name: Deploy to EC2 via SSH
        env:
          REMOTE_APP_DIR: ${{ secrets.REMOTE_APP_DIR }}
        run: |
          # Create remote directory
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "mkdir -p ${{ env.REMOTE_APP_DIR }}"

          # Copy the deployment package
          scp -o StrictHostKeyChecking=no deploy_package.tar.gz ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${{ env.REMOTE_APP_DIR }}/

          # Unpack, deploy, and clean up
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} <<'EOF'
            set -e
            cd ${{ env.REMOTE_APP_DIR }}
            
            echo "Unpacking deployment package..."
            tar -xzf deploy_package.tar.gz
            mv docker-compose.rendered.yml docker-compose.yml
            
            echo "Starting services..."
            if command -v docker-compose >/dev/null 2>&1; then
              COMPOSE_CMD="docker-compose"
            else
              COMPOSE_CMD="docker compose"
            fi

            $COMPOSE_CMD pull
            $COMPOSE_CMD up -d --remove-orphans
            
            echo "Cleaning up package..."
            rm deploy_package.tar.gz

            sleep 3
            echo "Running containers:"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
          EOF
